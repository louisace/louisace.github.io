<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Louis</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-25T12:49:42.429Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Louis</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>数据挖掘关联分析-Apriori算法</title>
    <link href="http://yoursite.com/2018/01/10/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90apriori%E7%AE%97%E6%B3%95%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2018/01/10/数据分析apriori算法关联分析/</id>
    <published>2018-01-10T09:32:11.534Z</published>
    <updated>2017-05-25T12:49:42.429Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、关联分析"><a href="#1、关联分析" class="headerlink" title="1、关联分析"></a>1、关联分析</h3><p>关联分析是在大规模数据集中寻找感兴趣关系的任务。这些关系可以分为两种形式：</p><ul><li><p>频繁项集</p></li><li><p>关联规则</p><p>   频繁项集是经常出现在一块儿的物品的集合，关联规则人暗示两物品之间存在很强的关系。</p><p>   下面举一个例子，说明这个概念：</p><p>   | 交易号码 |      商品      |<br>   | —- | :———-: |<br>   | 0    |    豆奶、莴苣     |<br>   | 1    | 莴苣、尿布、葡萄酒、甜菜 |<br>   | 2    | 豆奶、尿布、葡萄酒、橙汁 |<br>   | 3    | 莴苣、豆奶、尿布、葡萄酒 |<br>   | 4    | 莴苣、豆奶、尿布、橙汁  |</p><p>   ​                                                                      某杂货店交易清单</p><p>   频繁项集是指那些经常出现在一起的商品集合，图中的集合{葡萄酒,尿布,豆奶}就是频繁项集的一个例子。从这个数据集中也可以找到诸如尿布-&gt;葡萄酒的关联规则，即如果有人买了尿布，那么他很可能也会买葡萄酒。</p><p>   我们用支持度和可信度来度量这些有趣的关系。一个项集的<strong>支持度（support）</strong>被定义数据集中包含该项集的记录所占的比例。如上图中，{豆奶}的支持度为4/5，{豆奶,尿布}的支持度为3/5。支持度是针对项集来说的，因此可以定义一个<em>最小支持度</em>，而只保留满足最小值尺度的项集。</p><p>   <strong>可信度</strong>或<strong>置信度（confidence）</strong>是针对关联规则来定义的。规则{尿布}➞{啤酒}的可信度被定义为”支持度({尿布,啤酒})/支持度({尿布})”，由于{尿布,啤酒}的支持度为3/5，尿布的支持度为4/5，所以”尿布➞啤酒”的可信度为3/4。这意味着对于包含”尿布”的所有记录，我们的规则对其中75%的记录都适用。<br>   $$<br>   confidence(x \rightarrow y) = \frac {P(Y|X)=P(X \bigcup Y)}{P(X)}= \frac {support_count(X \bigcup Y)}{support_count(X)}<br>   $$</p><h3 id="Apriori原理"><a href="#Apriori原理" class="headerlink" title="Apriori原理"></a>Apriori原理</h3><p>   假设我们有一家经营着4种商品（商品0，商品1，商品2和商品3）的杂货店，2图显示了所有商品之间所有的可能组合：</p><p>   <img src="http://images0.cnblogs.com/blog/327901/201505/180044483261667.png" alt="img"></p></li></ul><pre><code>​                    图2 集合{0,1,2,3,4}中所有可能的项集组合</code></pre><p>对于单个项集的支持度，我们可以通过遍历每条记录并检查该记录是否包含该项集来计算。对于包含N中物品的数据集共有  $2^N-1$种项集组合，重复上述计算过程是不现实的。</p><p> 研究人员发现一种所谓的Apriori原理，可以帮助我们减少计算量。<strong>Apriori原理是说如果某个项集是频繁的，那么它的所有子集也是频繁的。</strong>更常用的是它的逆否命题，即如果一个项集是非频繁的，那么它的所有超集也是非频繁的。</p><p>在图3中，已知阴影项集{2,3}是非频繁的。利用这个知识，我们就知道项集{0,2,3}，{1,2,3}以及{0,1,2,3}也是非频繁的。也就是说，一旦计算出了{2,3}的支持度，知道它是非频繁的后，就可以紧接着排除{0,2,3}、{1,2,3}和{0,1,2,3}。</p><p><img src="http://images0.cnblogs.com/blog/327901/201505/180044489672795.png" alt="img"></p><p>​                图3 图中给出了所有可能的项集，其中非频繁项集用灰色表示。</p><h3 id="Apriori算法R语言实现"><a href="#Apriori算法R语言实现" class="headerlink" title="Apriori算法R语言实现"></a>Apriori算法R语言实现</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Apriori &lt;- <span class="keyword">function</span>(data, I, MIN_SUP, parameter = <span class="literal">NULL</span>)&#123;</span><br><span class="line">  f &lt;- CreateItemsets()</span><br><span class="line">c &lt;- FindFrequentItemsets(data, I, <span class="number">1</span>, MIN_SUP)</span><br><span class="line">k &lt;- <span class="number">2</span></span><br><span class="line">len4data &lt;- GetDatasetSize(data)</span><br><span class="line"><span class="keyword">while</span>( !IsEmpty(c[[k-<span class="number">1</span>]])) &#123;</span><br><span class="line">  f[[k]] &lt;- AprioriGen(c[k-<span class="number">1</span>])</span><br><span class="line">  <span class="keyword">for</span>( idx <span class="keyword">in</span> <span class="number">1</span>:len4data ) &#123;</span><br><span class="line">   ft &lt;- GetSubSet(f[k], data[[idx]])</span><br><span class="line">    len4ft &lt;- GetDatasetSize(ft)</span><br><span class="line">    <span class="keyword">for</span>( jdx <span class="keyword">in</span> <span class="number">1</span>:len4ft )&#123;</span><br><span class="line">      IncreaseSupportCount(f[[k]], ft[jdx])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">      c[[k]] &lt;- FindFrequestItemset(f[k], I, l, MIN_SUP)</span><br><span class="line">      k &lt;- k+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">c</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Apriori算法Python实现"><a href="#Apriori算法Python实现" class="headerlink" title="Apriori算法Python实现"></a>Apriori算法Python实现</h3><p>前面提到，关联分析的目标包括两项：发现频繁项集和发现关联规则。首先需要找到频繁项集，然后才能获得关联规则（正如前文所讲，计算关联规则的可信度需要用到频繁项集的支持度）。</p><p>Apriori算法是发现频繁项集的一种方法。Apriori算法的两个输入参数分别是最小支持度和数据集。该算法首先会生成所有单个元素的项集列表。接着扫描数据集来查看哪些项集满足最小支持度要求，那些不满足最小支持度的集合会被去掉。然后，对剩下来的集合进行组合以生成包含两个元素的项集。接下来，再重新扫描交易记录，去掉不满足最小支持度的项集。该过程重复进行直到所有项集都被去掉。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成候选项集</span></span><br><span class="line"><span class="comment">#建立一个apriori.py文件</span></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> [[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">5</span>]]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createC1</span><span class="params">(dataSet)</span>:</span></span><br><span class="line">    C1 = []</span><br><span class="line">    <span class="keyword">for</span> transaction <span class="keyword">in</span> dataset:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> transaction:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> [item] <span class="keyword">in</span> C1:</span><br><span class="line">                C1.append([item])</span><br><span class="line">    C1.sort()</span><br><span class="line">    <span class="keyword">return</span> map(frozenset, C1) </span><br><span class="line"><span class="comment">#C1为元素个数为1的项集（非频繁项集，还没有和最小支持°比较）。map(frozenset, C1)的意思是将C1由python列表转换为不变集合（frozenset，python的数据结构）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scanD</span><span class="params">(D, Ck, minSupport)</span>:</span></span><br><span class="line">    ssCnt = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> tid <span class="keyword">in</span> D:</span><br><span class="line">        <span class="keyword">for</span> can <span class="keyword">in</span> Ck:</span><br><span class="line">            <span class="keyword">if</span> can.issubset(tid):</span><br><span class="line">                ssCnt[can] = ssCnt.get(can, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    numItems = float(len(D))</span><br><span class="line">    retList = []</span><br><span class="line">    supportData = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> ssCnt:</span><br><span class="line">        support = ssCnt[key] / numItems</span><br><span class="line">        <span class="keyword">if</span> support &gt;= minSupport:</span><br><span class="line">            reList.insert(<span class="number">0</span>, key)</span><br><span class="line">        supportData[key] = support</span><br><span class="line">    <span class="keyword">return</span> reList, supportData</span><br><span class="line"><span class="comment">#D为全部数集，Ck为大小为k（包含k个）的候选项集，minSupport为设定的最小支持度。返回值中List在Ck中找出的频繁项集（支持度大于minSupport的），supportData记录各频繁项集的支持度。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过频繁项集列表Lk和项集个数k生成候选项集Ck+1。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aprioriGen</span><span class="params">(Lk, k)</span>:</span></span><br><span class="line">    retList = []</span><br><span class="line">    lenLk = len(Lk)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(LenLk):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,  lenLk):</span><br><span class="line">            <span class="comment">#前k-2项相同时，将两个集合合并</span></span><br><span class="line">            L1 = list(Lk[i][:k<span class="number">-2</span>]); L2 = list(Lk[i][:k<span class="number">-2</span>])</span><br><span class="line">            L1.sort(); L2.sort()</span><br><span class="line">            <span class="keyword">if</span> L1 == L2:</span><br><span class="line">                reList.append(Lk[i] | Lk[j])</span><br><span class="line"><span class="keyword">return</span> reList</span><br><span class="line"><span class="comment">#生成的过程中，首选对每个项集按元素排序，然后每次比较两个项集，只有在前k-1项相同时才将这两项合并。这样做是因为函数并非要两两合并各个集合，那样生成的集合并非都是k+1项的。在限制项数为k+1的前提下，只有在前k-1项相同、最后一项不相同的情况下合并才为所需要的新候选项集。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Apriori算法主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apriori</span><span class="params">(dataset, minSupport = <span class="number">0.5</span>)</span>:</span></span><br><span class="line">    C1 = createC1(dataSet)</span><br><span class="line">    D = map(ser, dataset)</span><br><span class="line">    L1, supportData = scanD(D, C1, minSupport)</span><br><span class="line">    L = [L1]</span><br><span class="line">    k = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span>(len(L[k<span class="number">-2</span>]) &gt; <span class="number">0</span>):</span><br><span class="line">        Ck = aprioriGen(L[k<span class="number">-2</span>], k)</span><br><span class="line">        Lk, supk = scanD(D, Ck, minSupport)</span><br><span class="line">        supportData.update(supk)</span><br><span class="line">        L.append(Lk)</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> L, supportData</span><br></pre></td></tr></table></figure><p>由于篇幅过长，下一节继续介绍Apriori算法。</p><p>感谢《使用Apriori算法和FP-growth算法进行关联分析》的支持</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、关联分析&quot;&gt;&lt;a href=&quot;#1、关联分析&quot; class=&quot;headerlink&quot; title=&quot;1、关联分析&quot;&gt;&lt;/a&gt;1、关联分析&lt;/h3&gt;&lt;p&gt;关联分析是在大规模数据集中寻找感兴趣关系的任务。这些关系可以分为两种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/01/10/hello-world/"/>
    <id>http://yoursite.com/2018/01/10/hello-world/</id>
    <published>2018-01-10T09:22:26.149Z</published>
    <updated>2018-01-10T09:22:26.149Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
