<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Louis</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-02-02T10:59:33.578Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Louis</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式详解</title>
    <link href="http://yoursite.com/2018/01/31/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/01/31/正则表达式详解/</id>
    <published>2018-01-31T09:57:34.000Z</published>
    <updated>2018-02-02T10:59:33.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、常见匹配模式"><a href="#1、常见匹配模式" class="headerlink" title="1、常见匹配模式"></a>1、常见匹配模式</h1><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">\w</td><td style="text-align:center">匹配字母数字及下划线</td></tr><tr><td style="text-align:center">\W</td><td style="text-align:center">匹配非字母数字及下划线</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:center">匹配任意空白字符，等价于[\t\n\r\f]</td></tr><tr><td style="text-align:center">\S</td><td style="text-align:center">匹配任意非空字符</td></tr><tr><td style="text-align:center">\d</td><td style="text-align:center">匹配任意数字，等价于[0-9]</td></tr><tr><td style="text-align:center">\D</td><td style="text-align:center">匹配任意非数字</td></tr><tr><td style="text-align:center">\A</td><td style="text-align:center">匹配字符串开始</td></tr><tr><td style="text-align:center">\Z</td><td style="text-align:center">匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符</td></tr><tr><td style="text-align:center">\z</td><td style="text-align:center">匹配字符结束</td></tr><tr><td style="text-align:center">\G</td><td style="text-align:center">匹配最后匹配完成的位置</td></tr><tr><td style="text-align:center">\n</td><td style="text-align:center">匹配一个换行符</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:center">匹配一个制表符</td></tr><tr><td style="text-align:center">^</td><td style="text-align:center">匹配字符串的开头</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">匹配字符串的结尾</td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符</td></tr><tr><td style="text-align:center">[…]</td><td style="text-align:center">用来表示一组字符，单独列出：[amk]匹配’a’,’m’或’k’</td></tr><tr><td style="text-align:center">[^…]</td><td style="text-align:center">不在[]中的字符</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">匹配0个或多个的表达式</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">匹配1个或多个的表达式</td></tr><tr><td style="text-align:center">？</td><td style="text-align:center">匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式</td></tr><tr><td style="text-align:center">{n}</td><td style="text-align:center">精确匹配n个前面表达式</td></tr><tr><td style="text-align:center">{n,m}</td><td style="text-align:center">匹配n到m次由前面的正则表达式定义的片段，贪婪方式</td></tr><tr><td style="text-align:center">a\</td><td style="text-align:center">b</td><td>匹配a或b</td></tr><tr><td style="text-align:center">()</td><td style="text-align:center">匹配括号内的表达式，也表示一个组</td></tr></tbody></table><h1 id="2、re-match"><a href="#2、re-match" class="headerlink" title="2、re.match"></a>2、re.match</h1><p>re.match尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.match(pattern, string, flags = <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="2-1、最常规的匹配"><a href="#2-1、最常规的匹配" class="headerlink" title="2.1、最常规的匹配"></a>2.1、最常规的匹配</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Hello 123 4567 World_This is a Regex Demo'</span></span><br><span class="line">print(len(content))</span><br><span class="line">result = re.match(<span class="string">'^Hello\s\d\d\d\s\d&#123;4&#125;\s\w&#123;10&#125;.*Demo$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.span())</span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="number">41</span></span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">41</span>), match=<span class="string">'Hello 123 4567 World_This is a Regex Demo'</span>&gt;</span><br><span class="line">Hello <span class="number">123</span> <span class="number">4567</span> World_This <span class="keyword">is</span> a Regex Demo</span><br><span class="line">(<span class="number">0</span>, <span class="number">41</span>)</span><br></pre></td></tr></table></figure><h2 id="2-2、泛匹配"><a href="#2-2、泛匹配" class="headerlink" title="2.2、泛匹配"></a>2.2、泛匹配</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Hello 123 4567 World_This is a Regex Demo'</span></span><br><span class="line">result = re.match(<span class="string">'^Hello.*Demo$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.span())</span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="number">41</span></span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">41</span>), match=<span class="string">'Hello 123 4567 World_This is a Regex Demo'</span>&gt;</span><br><span class="line">Hello <span class="number">123</span> <span class="number">4567</span> World_This <span class="keyword">is</span> a Regex Demo</span><br><span class="line">(<span class="number">0</span>, <span class="number">41</span>)</span><br></pre></td></tr></table></figure><h2 id="2-3、获取匹配目标"><a href="#2-3、获取匹配目标" class="headerlink" title="2.3、获取匹配目标"></a>2.3、获取匹配目标</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Hello 1234567 World_This is a Regex Demo'</span></span><br><span class="line">result = re.match(<span class="string">'^Hello\s(\d+)\sWorld.*Demo$'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br><span class="line"></span><br><span class="line">&gt;&gt; &lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">40</span>), match=<span class="string">'Hello 1234567 World_This is a Regex Demo'</span>&gt;</span><br><span class="line"><span class="number">1234567</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">40</span>)</span><br></pre></td></tr></table></figure><h2 id="2-4、贪婪匹配"><a href="#2-4、贪婪匹配" class="headerlink" title="2.4、贪婪匹配"></a>2.4、贪婪匹配</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Hello 1234567 World_This is a Regex Demo'</span></span><br><span class="line">result = re.match(<span class="string">'^He.*(\d+).*Demo$'</span>, content) <span class="comment"># .*尽可能匹配多的字符，匹配到最后一个满足要求的为止</span></span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line">print(result.span())</span><br><span class="line"></span><br><span class="line">&gt;&gt; &lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">40</span>), match=<span class="string">'Hello 1234567 World_This is a Regex Demo'</span>&gt;</span><br><span class="line"><span class="number">7</span></span><br><span class="line">(<span class="number">0</span>, <span class="number">40</span>)</span><br></pre></td></tr></table></figure><h2 id="2-5、非贪婪匹配"><a href="#2-5、非贪婪匹配" class="headerlink" title="2.5、非贪婪匹配"></a>2.5、非贪婪匹配</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Hello 1234567 World_This is a Regex Demo'</span></span><br><span class="line">result = re.match(<span class="string">'^He.*?(\d+).*Demo$'</span>, content) <span class="comment"># .*?尽可能匹配少的字符</span></span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt; &lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">40</span>), match=<span class="string">'Hello 1234567 World_This is a Regex Demo'</span>&gt;</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><h2 id="2-6、匹配模式"><a href="#2-6、匹配模式" class="headerlink" title="2.6、匹配模式"></a>2.6、匹配模式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'''Hello 1234567 World_This</span></span><br><span class="line"><span class="string">is a Regex Demo'''</span></span><br><span class="line">result = re.match(<span class="string">'^He.*?(\d+).*?Demo$'</span>, content, re.S)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt; &lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">40</span>), match=<span class="string">'Hello 1234567 World_This\nis a Regex Demo'</span>&gt;</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><h2 id="2-7、转义"><a href="#2-7、转义" class="headerlink" title="2.7、转义"></a>2.7、转义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'price is $5.00'</span></span><br><span class="line">result = re.match(<span class="string">'price is $5.00'</span>, content)</span><br><span class="line">result1 = re.match(<span class="string">'price is \$5\.00'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result1)</span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="keyword">None</span></span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">0</span>, <span class="number">14</span>), match=<span class="string">'price is $5.00'</span>&gt;</span><br></pre></td></tr></table></figure><p> 总结：尽量使用泛匹配、使用括号得到匹配目标、尽量使用非贪婪模式、由换行符就用re.S</p><h1 id="3、re-search"><a href="#3、re-search" class="headerlink" title="3、re.search"></a>3、re.search</h1><p>re.search扫描整个字符串并返回第一个成功的匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">'Extra stings Hello 1234567 World_This is a Regex Demo Extra stings'</span></span><br><span class="line">result = re.match(<span class="string">'Hello.*?(\d+).*?Demo'</span>, content)</span><br><span class="line">result1 = re.search(<span class="string">'Hello.*?(\d+).*?Demo'</span>, content)</span><br><span class="line">print(result)</span><br><span class="line">print(result1)</span><br><span class="line">print(result1.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="keyword">None</span></span><br><span class="line">&lt;_sre.SRE_Match object; span=(<span class="number">13</span>, <span class="number">53</span>), match=<span class="string">'Hello 1234567 World_This is a Regex Demo'</span>&gt;</span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure><p>  注意：未匹配方便，能用search就不用match</p><p>​                                          </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、常见匹配模式&quot;&gt;&lt;a href=&quot;#1、常见匹配模式&quot; class=&quot;headerlink&quot; title=&quot;1、常见匹配模式&quot;&gt;&lt;/a&gt;1、常见匹配模式&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="爬虫基础" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Requests用法详解</title>
    <link href="http://yoursite.com/2018/01/31/Requests%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/01/31/Requests用法详解/</id>
    <published>2018-01-31T08:12:03.000Z</published>
    <updated>2018-01-31T09:54:13.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、实例引入"><a href="#1、实例引入" class="headerlink" title="1、实例引入"></a>1、实例引入</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://www.baidu.com/'</span>)</span><br><span class="line">print(type(response))</span><br><span class="line">print(response.status_code)</span><br><span class="line">print(type(response.text))</span><br><span class="line">print(response.txt)</span><br><span class="line">print(response.cookies)</span><br></pre></td></tr></table></figure><h1 id="2、各种请求方式"><a href="#2、各种请求方式" class="headerlink" title="2、各种请求方式"></a>2、各种请求方式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">requests.post(<span class="string">'http://httpbin.org/post'</span>)</span><br><span class="line">requests.put(<span class="string">'http://httpbin.org/put'</span>)</span><br><span class="line">requests.delete(<span class="string">'http://httpbin.org/delete'</span>)</span><br><span class="line">requests.head(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">requests.options(<span class="string">'http://httpbin.org/get'</span>)</span><br></pre></td></tr></table></figure><h1 id="3、请求"><a href="#3、请求" class="headerlink" title="3、请求"></a>3、请求</h1><h2 id="3-1、基本的GET请求"><a href="#3-1、基本的GET请求" class="headerlink" title="3.1、基本的GET请求"></a>3.1、基本的GET请求</h2><h3 id="3-1-1、基本写法"><a href="#3-1-1、基本写法" class="headerlink" title="3.1.1、基本写法"></a>3.1.1、基本写法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://httpbin.org/get'</span>)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><h3 id="3-1-2、带参数GET请求"><a href="#3-1-2、带参数GET请求" class="headerlink" title="3.1.2、带参数GET请求"></a>3.1.2、带参数GET请求</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">"http://httpbin.org/get?name=louis&amp;age=20"</span>)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'louis'</span>,</span><br><span class="line">  <span class="string">'age'</span>: <span class="string">'20'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(<span class="string">"http://httpbin.org/get"</span>, params = data)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><h3 id="3-1-3、解析json"><a href="#3-1-3、解析json" class="headerlink" title="3.1.3、解析json"></a>3.1.3、解析json</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">"http://httpbin.org/get"</span>)</span><br><span class="line">print(type(response.text))</span><br><span class="line">print(response.json())</span><br><span class="line">print(type(response.json()))</span><br></pre></td></tr></table></figure><h3 id="3-1-4、获取二进制数据"><a href="#3-1-4、获取二进制数据" class="headerlink" title="3.1.4、获取二进制数据"></a>3.1.4、获取二进制数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">"https://github.com/favicon.ico"</span>)</span><br><span class="line">print(type(response.text), type(response.content))</span><br><span class="line">print(response.text)</span><br><span class="line">print(response.content)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'favicon.ico'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">  f.write(response.content)</span><br><span class="line">  f.close()</span><br></pre></td></tr></table></figure><h3 id="3-1-5、添加headers"><a href="#3-1-5、添加headers" class="headerlink" title="3.1.5、添加headers"></a>3.1.5、添加headers</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">"https://www.zhihu.com/explore"</span>)</span><br><span class="line">print(response.text)</span><br><span class="line"></span><br><span class="line">&gt;&gt; &lt;html&gt;&lt;body&gt;&lt;h1&gt;500 Server Error&lt;/h1&gt;</span><br><span class="line">An internal server error occured.</span><br><span class="line">&lt;/body&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(<span class="string">"https://www.zhihu.com/explore"</span>, headers = headers)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><h2 id="3-2、基本POST请求"><a href="#3-2、基本POST请求" class="headerlink" title="3.2、基本POST请求"></a>3.2、基本POST请求</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">'name'</span>: <span class="string">'louis'</span>, <span class="string">'age'</span>: <span class="string">'20'</span>&#125;</span><br><span class="line">response = requests.post(<span class="string">"http://httpbin.org/post"</span>, data = data)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">'name'</span>: <span class="string">'louis'</span>, <span class="string">'age'</span>: <span class="string">'20'</span>&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(<span class="string">"http://httpbin.org/post"</span>, data = data, headers = headers)</span><br><span class="line">print(response.json())</span><br><span class="line"></span><br><span class="line">&gt;&gt; &#123;<span class="string">'args'</span>: &#123;&#125;, <span class="string">'data'</span>: <span class="string">''</span>, <span class="string">'files'</span>: &#123;&#125;, <span class="string">'form'</span>: &#123;<span class="string">'age'</span>: <span class="string">'20'</span>, <span class="string">'name'</span>: <span class="string">'louis'</span>&#125;, <span class="string">'headers'</span>: &#123;<span class="string">'Accept'</span>: <span class="string">'*/*'</span>, <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate'</span>, <span class="string">'Connection'</span>: <span class="string">'close'</span>, <span class="string">'Content-Length'</span>: <span class="string">'17'</span>, <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>, <span class="string">'Host'</span>: <span class="string">'httpbin.org'</span>, <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>&#125;, <span class="string">'json'</span>: <span class="keyword">None</span>, <span class="string">'origin'</span>: <span class="string">'111.22.89.20'</span>, <span class="string">'url'</span>: <span class="string">'http://httpbin.org/post'</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3、响应"><a href="#3-3、响应" class="headerlink" title="3.3、响应"></a>3.3、响应</h2><h3 id="3-3-1、response属性"><a href="#3-3-1、response属性" class="headerlink" title="3.3.1、response属性"></a>3.3.1、response属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://www.jianshu.com'</span>)</span><br><span class="line">print(type(response.status_code), response.status_code)</span><br><span class="line">print(type(response.headers), response.headers)</span><br><span class="line">print(type(response.cookies), response.cookies)</span><br><span class="line">print(type(response.url), response.url)</span><br><span class="line">print(type(response.history), response.history)</span><br></pre></td></tr></table></figure><h3 id="3-3-2、状态码判断"><a href="#3-3-2、状态码判断" class="headerlink" title="3.3.2、状态码判断"></a>3.3.2、状态码判断</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://www.jianshu.com'</span>)</span><br><span class="line">exit() <span class="keyword">if</span> <span class="keyword">not</span> response.status_code == requests.codes.ok <span class="keyword">else</span> print(<span class="string">'Requests Successfully'</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt; Requests Successfully</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'http://www.jianshu.com'</span>)</span><br><span class="line">exit() <span class="keyword">if</span> <span class="keyword">not</span> response.status_code == <span class="number">200</span> <span class="keyword">else</span> print(<span class="string">'Requests Successfully'</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt; Requests Successfully</span><br></pre></td></tr></table></figure><h1 id="4、高级操作"><a href="#4、高级操作" class="headerlink" title="4、高级操作"></a>4、高级操作</h1><h2 id="4-1、文件上传"><a href="#4-1、文件上传" class="headerlink" title="4.1、文件上传"></a>4.1、文件上传</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">files = &#123;<span class="string">'file'</span>: open(<span class="string">'favicon.ico'</span>, <span class="string">'rb'</span>)&#125;</span><br><span class="line">response = requests.post(<span class="string">"http://httpbin.org/post"</span>, files = files)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><h2 id="4-2、获取cookie"><a href="#4-2、获取cookie" class="headerlink" title="4.2、获取cookie"></a>4.2、获取cookie</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">"https://www.baidu.com"</span>)</span><br><span class="line">print(response.cookies)</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> response.cookies.items():</span><br><span class="line">  print(key + <span class="string">'='</span> +value)</span><br></pre></td></tr></table></figure><h2 id="4-3、会话维持"><a href="#4-3、会话维持" class="headerlink" title="4.3、会话维持"></a>4.3、会话维持</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模拟登录</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">requests.get(<span class="string">'http://httpbin.org/cookies/set/number/123456789'</span>)</span><br><span class="line">response = requests.get(<span class="string">'https://httpbin.org/cookies'</span>)</span><br><span class="line">print(response.text)</span><br><span class="line"></span><br><span class="line">&gt;&gt; &#123;</span><br><span class="line">  <span class="string">"cookies"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 模拟登录</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">s.get(<span class="string">'http://httpbin.org/cookies/set/number/123456789'</span>)</span><br><span class="line">response = s.get(<span class="string">'https://httpbin.org/cookies'</span>)</span><br><span class="line">print(response.text)</span><br></pre></td></tr></table></figure><h2 id="4-4、证书验证"><a href="#4-4、证书验证" class="headerlink" title="4.4、证书验证"></a>4.4、证书验证</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://www.12306.cn'</span>)</span><br><span class="line">print(response.status_code)</span><br><span class="line"></span><br><span class="line">&gt;&gt; SSLError: (<span class="string">"bad handshake: Error([('SSL routines', 'ssl3_get_server_certificate', 'certificate verify failed')],)"</span>,)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 消除警告信息</span></span><br><span class="line"><span class="keyword">from</span> requests.packages <span class="keyword">import</span> urllib3</span><br><span class="line">urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://www.12306.cn'</span>, verify = <span class="keyword">False</span>)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">response = requests.get(<span class="string">'https://www.12306.cn'</span>, cert = (<span class="string">'/path/server.crt'</span>, <span class="string">'/path/key'</span>))  <span class="comment"># 给出证书进行验证</span></span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure><h2 id="4-5、代理设置"><a href="#4-5、代理设置" class="headerlink" title="4.5、代理设置"></a>4.5、代理设置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代理直接设置</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">"http"</span>: <span class="string">"http://127.0.0.1:1234"</span>,</span><br><span class="line">  <span class="string">"https"</span>: <span class="string">"https://127.0.0.1:1234"</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(<span class="string">"https://www.taobao.com"</span>, proxies = proxies)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代理有用户名和密码</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">"http"</span>: <span class="string">"http://user:password@127.0.0.1:1234"</span>,</span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(<span class="string">"https://www.taobao.com"</span>, proxies = proxies)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代理使用socks设置</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">  <span class="string">"http"</span>: <span class="string">"socks5://127.0.0.1:1234"</span>,</span><br><span class="line">  <span class="string">"https"</span>: <span class="string">"socks5://127.0.0.1:1234"</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(<span class="string">"https://www.taobao.com"</span>, proxies = proxies)</span><br><span class="line">print(response.status_code)</span><br></pre></td></tr></table></figure><h2 id="4-6、超时设置"><a href="#4-6、超时设置" class="headerlink" title="4.6、超时设置"></a>4.6、超时设置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> ReadTimeout</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  response = requests.get(<span class="string">"https://www.taobao.com"</span>, timeout = <span class="number">0.1</span>)</span><br><span class="line">  print(response.status_code)</span><br><span class="line"><span class="keyword">except</span> ReadTimeout:</span><br><span class="line">  print(<span class="string">'TimeOut'</span>)</span><br></pre></td></tr></table></figure><h2 id="4-7、认证设置"><a href="#4-7、认证设置" class="headerlink" title="4.7、认证设置"></a>4.7、认证设置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">'http://120.0.0.1:1234'</span>, auth = HTTPBasicAuth(<span class="string">'user'</span>, <span class="string">'123'</span>))</span><br><span class="line">print(r.status_code)</span><br></pre></td></tr></table></figure><h2 id="4-8、异常处理"><a href="#4-8、异常处理" class="headerlink" title="4.8、异常处理"></a>4.8、异常处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.exceptions <span class="keyword">import</span> ReadTimeout,ConnectionError,RequestException</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  response = requests.get(<span class="string">"http://httpbin.org/get"</span>, timeout = <span class="number">0.5</span>)</span><br><span class="line">  print(response.status_code)</span><br><span class="line"><span class="keyword">except</span> ReadTimeout:</span><br><span class="line">  print(<span class="string">'Timeout'</span>)</span><br><span class="line"><span class="keyword">except</span> ConnectionError:</span><br><span class="line">  print(<span class="string">'Connection error'</span>)</span><br><span class="line"><span class="keyword">except</span> RequestException:</span><br><span class="line">  print(<span class="string">'error'</span>)</span><br></pre></td></tr></table></figure><p>附录：</p><p>Requests Python3官方文档查询：<a href="http://www.python-requests.org/en/master/" target="_blank" rel="noopener">http://www.python-requests.org/en/master/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、实例引入&quot;&gt;&lt;a href=&quot;#1、实例引入&quot; class=&quot;headerlink&quot; title=&quot;1、实例引入&quot;&gt;&lt;/a&gt;1、实例引入&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="爬虫基础" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>urllib用法详解</title>
    <link href="http://yoursite.com/2018/01/20/urllib%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/01/20/urllib用法详解/</id>
    <published>2018-01-20T08:35:26.000Z</published>
    <updated>2018-01-30T09:20:12.810Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Urllib"><a href="#什么是Urllib" class="headerlink" title="什么是Urllib"></a>什么是Urllib</h1><p>python内置的HTTP请求库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urllib.request       <span class="comment"># 请求模块</span></span><br><span class="line">urllib.error         <span class="comment"># 异常处理模块</span></span><br><span class="line">urllib.parse         <span class="comment"># url解析模块</span></span><br><span class="line">urllib.robotparser   <span class="comment"># robot.txt解析模块</span></span><br></pre></td></tr></table></figure><h2 id="一、请求模块"><a href="#一、请求模块" class="headerlink" title="一、请求模块"></a>一、请求模块</h2><h3 id="1-1-urllib库的函数—urlopen"><a href="#1-1-urllib库的函数—urlopen" class="headerlink" title="1.1 urllib库的函数—urlopen"></a>1.1 urllib库的函数—urlopen</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urllib.request.urlopen(url, data=<span class="keyword">None</span>, [timeout,]*, cafile=<span class="keyword">None</span>, capath=<span class="keyword">None</span>, cadefault=<span class="keyword">False</span>, context=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用urlopen请求打开百度首页，获取百度首页的源代码</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用post请求将&#123;'world': 'hello'&#125;这个字典传送到'http://httpbin.org/post'</span></span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">data = bytes(urllib.parse.urlencode(&#123;<span class="string">'world'</span>: <span class="string">'hello'</span>&#125;), encoding = <span class="string">'utf-8'</span>)</span><br><span class="line">response = urllib.request.urlopen(<span class="string">'http://httpbin.org/post'</span>, data = data)</span><br><span class="line">print(response.read())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 超时(单位为秒)</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'http://httpbin.org/get'</span>, timeout = <span class="number">1</span>)</span><br><span class="line">print(response.read())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 超时判断</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  response = urllib.request.urlopen(<span class="string">'http://httpbin.org/get'</span>, timeout = <span class="number">0.1</span>)</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">  <span class="keyword">if</span> isinstance(e.reason, socket.timeout):</span><br><span class="line">    print(<span class="string">'TIME OUT'</span>)</span><br></pre></td></tr></table></figure><h3 id="1-2-响应–response"><a href="#1-2-响应–response" class="headerlink" title="1.2 响应–response"></a>1.2 响应–response</h3><h4 id="1-2-1-响应类型"><a href="#1-2-1-响应类型" class="headerlink" title="1.2.1 响应类型"></a>1.2.1 响应类型</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'https://www.python.org'</span>)</span><br><span class="line">print(type(response))</span><br><span class="line"></span><br><span class="line">&gt;&gt; &lt;<span class="class"><span class="keyword">class</span> '<span class="title">http</span>.<span class="title">client</span>.<span class="title">HTTPResponse</span>'&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-2-状态码、响应头"><a href="#1-2-2-状态码、响应头" class="headerlink" title="1.2.2 状态码、响应头"></a>1.2.2 状态码、响应头</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">response = urllib.request.urlopen(<span class="string">'https://www.python.org'</span>)</span><br><span class="line">print(response.status)</span><br><span class="line">print(response.getheaders())</span><br><span class="line">print(response.getheader(<span class="string">'Server'</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt; <span class="number">200</span></span><br><span class="line">[(<span class="string">'Server'</span>, <span class="string">'nginx'</span>), (<span class="string">'Content-Type'</span>, <span class="string">'text/html; charset=utf-8'</span>), (<span class="string">'X-Frame-Options'</span>, <span class="string">'SAMEORIGIN'</span>), (<span class="string">'x-xss-protection'</span>, <span class="string">'1; mode=block'</span>), (<span class="string">'X-Clacks-Overhead'</span>, <span class="string">'GNU Terry Pratchett'</span>), (<span class="string">'Via'</span>, <span class="string">'1.1 varnish'</span>), (<span class="string">'Fastly-Debug-Digest'</span>, <span class="string">'a63ab819df3b185a89db37a59e39f0dd85cf8ee71f54bbb42fae41670ae56fd2'</span>), (<span class="string">'Content-Length'</span>, <span class="string">'48893'</span>), (<span class="string">'Accept-Ranges'</span>, <span class="string">'bytes'</span>), (<span class="string">'Date'</span>, <span class="string">'Tue, 30 Jan 2018 07:54:24 GMT'</span>), (<span class="string">'Via'</span>, <span class="string">'1.1 varnish'</span>), (<span class="string">'Age'</span>, <span class="string">'3134'</span>), (<span class="string">'Connection'</span>, <span class="string">'close'</span>), (<span class="string">'X-Served-By'</span>, <span class="string">'cache-iad2131-IAD, cache-lax8649-LAX'</span>), (<span class="string">'X-Cache'</span>, <span class="string">'HIT, HIT'</span>), (<span class="string">'X-Cache-Hits'</span>, <span class="string">'1, 4'</span>), (<span class="string">'X-Timer'</span>, <span class="string">'S1517298865.911478,VS0,VE0'</span>), (<span class="string">'Vary'</span>, <span class="string">'Cookie'</span>), (<span class="string">'Strict-Transport-Security'</span>, <span class="string">'max-age=63072000; includeSubDomains'</span>)]</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure><h3 id="1-3-Request对象简单用法"><a href="#1-3-Request对象简单用法" class="headerlink" title="1.3 Request对象简单用法"></a>1.3 Request对象简单用法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用将url构建成request进行request请求</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">request = urllib.request.Request(<span class="string">'https://www.python.org'</span>)</span><br><span class="line">response = urllib.request.urlopen(request)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request，parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.python.org/post'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">  <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'</span>,</span><br><span class="line">  <span class="string">'Host'</span>: <span class="string">'httpbin.org'</span></span><br><span class="line">&#125;</span><br><span class="line">dict = &#123;</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'Germey'</span></span><br><span class="line">&#125;</span><br><span class="line">data = bytes(parse.urlencode(dict), encoding = <span class="string">'utf-8'</span>)</span><br><span class="line">req = request.Request(url = url, data = data, headers = headers, methods = <span class="string">'POST'</span>)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用add_header方法添加头部信息</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request，parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.python.org/post'</span></span><br><span class="line">dict = &#123;</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'Germey'</span> </span><br><span class="line">&#125;</span><br><span class="line">data = bytes(parse.urlencode(dict), encoding = <span class="string">'utf-8'</span>)</span><br><span class="line">req = request.Request(url = url, data = data, methods = <span class="string">'POST'</span>)</span><br><span class="line">req.add_header(<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64)'</span>)</span><br><span class="line">response = request.urlopen(req)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><h3 id="1-4-Handler对象的简单方法"><a href="#1-4-Handler对象的简单方法" class="headerlink" title="1.4 Handler对象的简单方法"></a>1.4 Handler对象的简单方法</h3><h4 id="1-4-1-代理"><a href="#1-4-1-代理" class="headerlink" title="1.4.1 代理"></a>1.4.1 代理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"></span><br><span class="line">proxy_handler = urllib.request.ProxyHandler(&#123;</span><br><span class="line">  <span class="string">'http'</span>: <span class="string">'http://127.0.0.1:9743'</span>,</span><br><span class="line">  <span class="string">'http'</span>: <span class="string">'https://127.0.0.1:9743'</span></span><br><span class="line">&#125;)</span><br><span class="line">opener = urllib.request.build_opener(proxy_handler)</span><br><span class="line">response = opener.open(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">print(response.read())</span><br></pre></td></tr></table></figure><h3 id="1-4-2-Cookie–维持登陆状态"><a href="#1-4-2-Cookie–维持登陆状态" class="headerlink" title="1.4.2 Cookie–维持登陆状态"></a>1.4.2 Cookie–维持登陆状态</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取cookie</span></span><br><span class="line"><span class="keyword">import</span> http.cookiejar, urllib.request</span><br><span class="line"></span><br><span class="line">cookie = http.cookiejar.CookieJar()</span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.open(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cookie:</span><br><span class="line">  print(item.name + <span class="string">"="</span> + item.value)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将cookie存入cookie.txt文件</span></span><br><span class="line"><span class="keyword">import</span> http.cookiejar, urllib.request</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'cookie.txt'</span></span><br><span class="line">cookie = http.cookiejar.MozilaCookieJar(filename)</span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.open(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">cookie.save(ignore_discard = <span class="keyword">True</span>, ignore_expires = <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将cookie存入cookie.txt文件</span></span><br><span class="line"><span class="keyword">import</span> http.cookiejar, urllib.request</span><br><span class="line"></span><br><span class="line">filename = <span class="string">'cookie.txt'</span></span><br><span class="line">cookie = http.cookiejar.LWPCookieJar(filename)  <span class="comment"># 存入格式不同</span></span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.open(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">cookie.save(ignore_discard = <span class="keyword">True</span>, ignore_expires = <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取存入cookie.txt文件内的cookie，并以此cookie对百度首页发出请求</span></span><br><span class="line"><span class="keyword">import</span> http.cookiejar, urllib.request</span><br><span class="line"></span><br><span class="line">cookie = http.cookiejar.LWPCookieJar()</span><br><span class="line">cookie.load(<span class="string">'cookie.txt'</span>, ignore_discard = <span class="keyword">True</span>, ignore_expires = <span class="keyword">True</span>)</span><br><span class="line">handler = urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener = urllib.request.build_opener(handler)</span><br><span class="line">response = opener.open(<span class="string">'http://www.baidu.com'</span>)</span><br><span class="line">print(response.read().decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><h2 id="二、异常处理模块"><a href="#二、异常处理模块" class="headerlink" title="二、异常处理模块"></a>二、异常处理模块</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, error</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  response = request.urlopen(<span class="string">'http://louisw.com/index.htm'</span>)</span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:</span><br><span class="line">  print(e.reason)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request, error</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  response = request.urlopen(<span class="string">'http://louisw.com/index.htm'</span>)</span><br><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">  print(e.reason, e.code, e.headers, sep = <span class="string">'\n'</span>)</span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:</span><br><span class="line">  print(e.reason)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  print(<span class="string">'Request Successfully'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.error</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  response = urllib.request.urlopen(<span class="string">'http://www.baidu.com'</span>, timeout = <span class="number">0.01</span>)</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">  print(type(e.reason))</span><br><span class="line">  <span class="keyword">if</span> isinstance(e.reason, socket.timeout):</span><br><span class="line">    print(<span class="string">'TIME OUT'</span>)</span><br></pre></td></tr></table></figure><h2 id="三、URL解析模块"><a href="#三、URL解析模块" class="headerlink" title="三、URL解析模块"></a>三、URL解析模块</h2><h3 id="3-1-urlparse"><a href="#3-1-urlparse" class="headerlink" title="3.1 urlparse"></a>3.1 urlparse</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">urllib.parse.urlparse(urlstring, scheme=<span class="string">''</span>, allow_fragments = <span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">result = urlparse(<span class="string">'http://www.baidu.com/index.html?id=5#comment'</span>)</span><br><span class="line">print(type(result), result)</span><br><span class="line"></span><br><span class="line">&gt;&gt; &lt;<span class="class"><span class="keyword">class</span> '<span class="title">urllib</span>.<span class="title">parse</span>.<span class="title">ParseResult</span>'&gt; <span class="title">ParseResult</span><span class="params">(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.html'</span>, params=<span class="string">''</span>, query=<span class="string">'id=5'</span>, fragment=<span class="string">'comment'</span>)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">result = urlparse(<span class="string">'www.baidu.com/index.html?id=5#comment'</span>, scheme = <span class="string">'https'</span>)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">&gt;&gt; ParseResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.html'</span>, params=<span class="string">''</span>, query=<span class="string">'id=5'</span>, fragment=<span class="string">'comment'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">result = urlparse(<span class="string">'http://www.baidu.com/index.html?id=5#comment'</span>, scheme = <span class="string">'https'</span>)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">&gt;&gt;ParseResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.html'</span>, params=<span class="string">''</span>, query=<span class="string">'id=5'</span>, fragment=<span class="string">'comment'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">result = urlparse(<span class="string">'http://www.baidu.com/index.html?id=5#comment'</span>, allow_fragments = <span class="keyword">False</span>)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">&gt;&gt; ParseResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.html'</span>, params=<span class="string">''</span>, query=<span class="string">'id=5#comment'</span>, fragment=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line">result = urlparse(<span class="string">'http://www.baidu.com/index.html#comment'</span>, allow_fragments = <span class="keyword">False</span>)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">&gt;&gt; ParseResult(scheme=<span class="string">'http'</span>, netloc=<span class="string">'www.baidu.com'</span>, path=<span class="string">'/index.html#comment'</span>, params=<span class="string">''</span>, query=<span class="string">''</span>, fragment=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><h3 id="3-2-urlunparse"><a href="#3-2-urlunparse" class="headerlink" title="3.2 urlunparse"></a>3.2 urlunparse</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlunparse</span><br><span class="line"></span><br><span class="line">data = [<span class="string">'http'</span>, <span class="string">'www.baidu.com'</span>, <span class="string">'index.html'</span>, <span class="string">'user'</span>, <span class="string">'a=6'</span>, <span class="string">'comment'</span>]</span><br><span class="line">print(urlunparse(data))</span><br><span class="line"></span><br><span class="line">&gt;&gt; http://www.baidu.com/index.html;user?a=6#comment</span><br></pre></td></tr></table></figure><h3 id="3-3-urljoin"><a href="#3-3-urljoin" class="headerlink" title="3.3 urljoin"></a>3.3 urljoin</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拼接url</span></span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"></span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'FAQ.html'</span>))</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'https://www.louisw.com/FAQ.html'</span>))</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com/about.html'</span>, <span class="string">'https://www.louisw.com/FAQ.html'</span>))</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com/about.html'</span>, <span class="string">'https://www.louisw.com/FAQ.html?question=2'</span>))</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com?wd=abc'</span>, <span class="string">'https://www.louisw.com/index.php'</span>))</span><br><span class="line">print(urljoin(<span class="string">'http://www.baidu.com'</span>, <span class="string">'?category=2#comment'</span>))</span><br><span class="line">print(urljoin(<span class="string">'www.baidu.com'</span>, <span class="string">'?category=2#comment'</span>))</span><br><span class="line">print(urljoin(<span class="string">'www.baidu.com#comment'</span>, <span class="string">'?category=2'</span>))</span><br><span class="line"></span><br><span class="line">&gt;&gt; http://www.baidu.com/FAQ.html</span><br><span class="line">   https://www.louisw.com/FAQ.html</span><br><span class="line">   https://www.louisw.com/FAQ.html </span><br><span class="line">   https://www.louisw.com/FAQ.html?question=2</span><br><span class="line">   https://www.louisw.com/index.php</span><br><span class="line">   http://www.baidu.com?category=2#comment</span><br><span class="line">   www.baidu.com?category=2#comment</span><br><span class="line">   www.baidu.com?category=2</span><br></pre></td></tr></table></figure><h3 id="3-4-urlencode"><a href="#3-4-urlencode" class="headerlink" title="3.4 urlencode"></a>3.4 urlencode</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将字典数据拼接成url</span></span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"></span><br><span class="line">params = &#123;</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'germay'</span>,</span><br><span class="line">  <span class="string">'age'</span>: <span class="string">'20'</span></span><br><span class="line">&#125;</span><br><span class="line">base_url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">url = base_url + urlencode(params)</span><br><span class="line">print(url)</span><br><span class="line"></span><br><span class="line">&gt;&gt; http://www.baidu.comname=germay&amp;age=<span class="number">20</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是Urllib&quot;&gt;&lt;a href=&quot;#什么是Urllib&quot; class=&quot;headerlink&quot; title=&quot;什么是Urllib&quot;&gt;&lt;/a&gt;什么是Urllib&lt;/h1&gt;&lt;p&gt;python内置的HTTP请求库&lt;/p&gt;
&lt;figure class=&quot;highli
      
    
    </summary>
    
    
      <category term="爬虫基础" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>数据分析关联分析Apriori算法</title>
    <link href="http://yoursite.com/2018/01/11/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90Apriori%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/01/11/数据分析关联分析Apriori算法/</id>
    <published>2018-01-11T05:22:00.000Z</published>
    <updated>2018-01-11T05:42:50.517Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、关联分析"><a href="#1、关联分析" class="headerlink" title="1、关联分析"></a>1、关联分析</h3><p>关联分析是在大规模数据集中寻找感兴趣关系的任务。这些关系可以分为两种形式：</p><ul><li><p>频繁项集</p></li><li><p>关联规则</p><p>频繁项集是经常出现在一块儿的物品的集合，关联规则人暗示两物品之间存在很强的关系。</p><p>下面举一个例子，说明这个概念：</p><p>| 交易号码 |      商品      |<br>| —- | :———-: |<br>| 0    |    豆奶、莴苣     |<br>| 1    | 莴苣、尿布、葡萄酒、甜菜 |<br>| 2    | 豆奶、尿布、葡萄酒、橙汁 |<br>| 3    | 莴苣、豆奶、尿布、葡萄酒 |<br>| 4    | 莴苣、豆奶、尿布、橙汁  |</p><p>​                                                                      某杂货店交易清单</p><p>频繁项集是指那些经常出现在一起的商品集合，图中的集合{葡萄酒,尿布,豆奶}就是频繁项集的一个例子。从这个数据集中也可以找到诸如尿布-&gt;葡萄酒的关联规则，即如果有人买了尿布，那么他很可能也会买葡萄酒。</p><p>我们用支持度和可信度来度量这些有趣的关系。一个项集的<strong>支持度（support）</strong>被定义数据集中包含该项集的记录所占的比例。如上图中，{豆奶}的支持度为4/5，{豆奶,尿布}的支持度为3/5。支持度是针对项集来说的，因此可以定义一个<em>最小支持度</em>，而只保留满足最小值尺度的项集。</p><p><strong>可信度</strong>或<strong>置信度（confidence）</strong>是针对关联规则来定义的。规则{尿布}➞{啤酒}的可信度被定义为”支持度({尿布,啤酒})/支持度({尿布})”，由于{尿布,啤酒}的支持度为3/5，尿布的支持度为4/5，所以”尿布➞啤酒”的可信度为3/4。这意味着对于包含”尿布”的所有记录，我们的规则对其中75%的记录都适用。<br>$$<br>confidence(x \rightarrow y) = \frac {P(Y|X)=P(X \bigcup Y)}{P(X)}= \frac {support_count(X \bigcup Y)}{support_count(X)}<br>$$</p><h3 id="Apriori原理"><a href="#Apriori原理" class="headerlink" title="Apriori原理"></a>Apriori原理</h3><p>假设我们有一家经营着4种商品（商品0，商品1，商品2和商品3）的杂货店，2图显示了所有商品之间所有的可能组合：</p><p><img src="http://images0.cnblogs.com/blog/327901/201505/180044483261667.png" alt="img"></p></li></ul><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">​图<span class="number">2</span> 集合&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;中所有可能的项集组合</span><br></pre></td></tr></table></figure><p>对于单个项集的支持度，我们可以通过遍历每条记录并检查该记录是否包含该项集来计算。对于包含N中物品的数据集共有  $2^N-1$种项集组合，重复上述计算过程是不现实的。</p><p> 研究人员发现一种所谓的Apriori原理，可以帮助我们减少计算量。<strong>Apriori原理是说如果某个项集是频繁的，那么它的所有子集也是频繁的。</strong>更常用的是它的逆否命题，即如果一个项集是非频繁的，那么它的所有超集也是非频繁的。</p><p>在图3中，已知阴影项集{2,3}是非频繁的。利用这个知识，我们就知道项集{0,2,3}，{1,2,3}以及{0,1,2,3}也是非频繁的。也就是说，一旦计算出了{2,3}的支持度，知道它是非频繁的后，就可以紧接着排除{0,2,3}、{1,2,3}和{0,1,2,3}。</p><p><img src="http://images0.cnblogs.com/blog/327901/201505/180044489672795.png" alt="img"></p><p>​                图3 图中给出了所有可能的项集，其中非频繁项集用灰色表示。</p><h3 id="Apriori算法R语言实现"><a href="#Apriori算法R语言实现" class="headerlink" title="Apriori算法R语言实现"></a>Apriori算法R语言实现</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Apriori &lt;- <span class="keyword">function</span>(data, I, MIN_SUP, parameter = <span class="literal">NULL</span>)&#123;</span><br><span class="line">  f &lt;- CreateItemsets()</span><br><span class="line">c &lt;- FindFrequentItemsets(data, I, <span class="number">1</span>, MIN_SUP)</span><br><span class="line">k &lt;- <span class="number">2</span></span><br><span class="line">len4data &lt;- GetDatasetSize(data)</span><br><span class="line"><span class="keyword">while</span>( !IsEmpty(c[[k-<span class="number">1</span>]])) &#123;</span><br><span class="line">  f[[k]] &lt;- AprioriGen(c[k-<span class="number">1</span>])</span><br><span class="line">  <span class="keyword">for</span>( idx <span class="keyword">in</span> <span class="number">1</span>:len4data ) &#123;</span><br><span class="line">   ft &lt;- GetSubSet(f[k], data[[idx]])</span><br><span class="line">    len4ft &lt;- GetDatasetSize(ft)</span><br><span class="line">    <span class="keyword">for</span>( jdx <span class="keyword">in</span> <span class="number">1</span>:len4ft )&#123;</span><br><span class="line">      IncreaseSupportCount(f[[k]], ft[jdx])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">      c[[k]] &lt;- FindFrequestItemset(f[k], I, l, MIN_SUP)</span><br><span class="line">      k &lt;- k+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">c</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Apriori算法Python实现"><a href="#Apriori算法Python实现" class="headerlink" title="Apriori算法Python实现"></a>Apriori算法Python实现</h3><p>前面提到，关联分析的目标包括两项：发现频繁项集和发现关联规则。首先需要找到频繁项集，然后才能获得关联规则（正如前文所讲，计算关联规则的可信度需要用到频繁项集的支持度）。</p><p>Apriori算法是发现频繁项集的一种方法。Apriori算法的两个输入参数分别是最小支持度和数据集。该算法首先会生成所有单个元素的项集列表。接着扫描数据集来查看哪些项集满足最小支持度要求，那些不满足最小支持度的集合会被去掉。然后，对剩下来的集合进行组合以生成包含两个元素的项集。接下来，再重新扫描交易记录，去掉不满足最小支持度的项集。该过程重复进行直到所有项集都被去掉。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成候选项集</span></span><br><span class="line"><span class="comment">#建立一个apriori.py文件</span></span><br><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> [[<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">5</span>]]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createC1</span><span class="params">(dataSet)</span>:</span></span><br><span class="line">    C1 = []</span><br><span class="line">    <span class="keyword">for</span> transaction <span class="keyword">in</span> dataset:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> transaction:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> [item] <span class="keyword">in</span> C1:</span><br><span class="line">                C1.append([item])</span><br><span class="line">    C1.sort()</span><br><span class="line">    <span class="keyword">return</span> map(frozenset, C1) </span><br><span class="line"><span class="comment">#C1为元素个数为1的项集（非频繁项集，还没有和最小支持°比较）。map(frozenset, C1)的意思是将C1由python列表转换为不变集合（frozenset，python的数据结构）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scanD</span><span class="params">(D, Ck, minSupport)</span>:</span></span><br><span class="line">    ssCnt = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> tid <span class="keyword">in</span> D:</span><br><span class="line">        <span class="keyword">for</span> can <span class="keyword">in</span> Ck:</span><br><span class="line">            <span class="keyword">if</span> can.issubset(tid):</span><br><span class="line">                ssCnt[can] = ssCnt.get(can, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    numItems = float(len(D))</span><br><span class="line">    retList = []</span><br><span class="line">    supportData = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> ssCnt:</span><br><span class="line">        support = ssCnt[key] / numItems</span><br><span class="line">        <span class="keyword">if</span> support &gt;= minSupport:</span><br><span class="line">            reList.insert(<span class="number">0</span>, key)</span><br><span class="line">        supportData[key] = support</span><br><span class="line">    <span class="keyword">return</span> reList, supportData</span><br><span class="line"><span class="comment">#D为全部数集，Ck为大小为k（包含k个）的候选项集，minSupport为设定的最小支持度。返回值中List在Ck中找出的频繁项集（支持度大于minSupport的），supportData记录各频繁项集的支持度。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过频繁项集列表Lk和项集个数k生成候选项集Ck+1。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aprioriGen</span><span class="params">(Lk, k)</span>:</span></span><br><span class="line">    retList = []</span><br><span class="line">    lenLk = len(Lk)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(LenLk):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>,  lenLk):</span><br><span class="line">            <span class="comment">#前k-2项相同时，将两个集合合并</span></span><br><span class="line">            L1 = list(Lk[i][:k<span class="number">-2</span>]); L2 = list(Lk[i][:k<span class="number">-2</span>])</span><br><span class="line">            L1.sort(); L2.sort()</span><br><span class="line">            <span class="keyword">if</span> L1 == L2:</span><br><span class="line">                reList.append(Lk[i] | Lk[j])</span><br><span class="line"><span class="keyword">return</span> reList</span><br><span class="line"><span class="comment">#生成的过程中，首选对每个项集按元素排序，然后每次比较两个项集，只有在前k-1项相同时才将这两项合并。这样做是因为函数并非要两两合并各个集合，那样生成的集合并非都是k+1项的。在限制项数为k+1的前提下，只有在前k-1项相同、最后一项不相同的情况下合并才为所需要的新候选项集。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Apriori算法主函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apriori</span><span class="params">(dataset, minSupport = <span class="number">0.5</span>)</span>:</span></span><br><span class="line">    C1 = createC1(dataSet)</span><br><span class="line">    D = map(ser, dataset)</span><br><span class="line">    L1, supportData = scanD(D, C1, minSupport)</span><br><span class="line">    L = [L1]</span><br><span class="line">    k = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span>(len(L[k<span class="number">-2</span>]) &gt; <span class="number">0</span>):</span><br><span class="line">        Ck = aprioriGen(L[k<span class="number">-2</span>], k)</span><br><span class="line">        Lk, supk = scanD(D, Ck, minSupport)</span><br><span class="line">        supportData.update(supk)</span><br><span class="line">        L.append(Lk)</span><br><span class="line">        k += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> L, supportData</span><br></pre></td></tr></table></figure><p>由于篇幅过长，下一节继续介绍Apriori算法。</p><p>感谢《使用Apriori算法和FP-growth算法进行关联分析》的支持</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1、关联分析&quot;&gt;&lt;a href=&quot;#1、关联分析&quot; class=&quot;headerlink&quot; title=&quot;1、关联分析&quot;&gt;&lt;/a&gt;1、关联分析&lt;/h3&gt;&lt;p&gt;关联分析是在大规模数据集中寻找感兴趣关系的任务。这些关系可以分为两种形式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="数据分析" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
      <category term="关联分析" scheme="http://yoursite.com/tags/%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90/"/>
    
      <category term="Apriori算法" scheme="http://yoursite.com/tags/Apriori%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
